Class MyInstallerPackage.Installer
{

XData setup [ XMLNamespace = INSTALLER ]
{
<Manifest>
<Var Name="WSDLUserName" Value="appuser"/> 
<Var Name="DataBaseDir" Value="/home/irisowner/database/"/> 

<User Username="appuser" PasswordVar="appuserpwd" Roles="%All" Fullname="Ensemble Operator" Namespace="" Routine="" ExpirationDate="" ChangePassword="0" Enabled="1" Comment="Ensemble operator account for Maganed Alert"/>

<Namespace Name="WSHQ" Create="overwrite" Code="WSHQ" Data="WSHQ">
	<Configuration>
	<Database Name="WSHQ" Create="overwrite" Dir="${DataBaseDir}WSHQ" InitialSize="1"/>
	</Configuration>
	<Invoke Class="%SYSTEM.OBJ" Method="ImportDir">
		<Arg Value="${SRCDIR}" />
		<Arg Value="" />
		<Arg Value="ck" />
		<Arg Value=".e" />
		<Arg Value="1" />
	</Invoke>

	<Invoke Class="WSHQ.Util" Method="ClearAll">
	</Invoke>
</Namespace>

<Namespace Name="WSHQ" Create="no">
  	<Var Name="PackageName" Value='WSHQ'/>
	<Var Name="ProductionName" Value="${PackageName}.Production.Production1"/>
	<Invoke Class="Ens.Util.Statistics" Method="EnableStatsForProduction" CheckStatus="1" Return="RetVal"/>
	<Invoke Class="Ens.Config.Credentials" Method="SetCredential">
		<Arg Value="default" />
		<Arg Value="appuser" />
		<Arg Value="sys" />
	</Invoke>
	<Invoke Class="Ens.Config.Credentials" Method="SetCredential">
		<Arg Value="ensemble-email" />
		<Arg Value="user1" />
		<Arg Value="sys" />
	</Invoke>

	<Production Name="${ProductionName}" AutoStart="1">
	<Setting  name="" Item="WSDC1" Target="Adapter" Setting="WebServiceURL" Value="http://wsdc1:${HTTPPORT}/csp/wsdc/WSDC.Service.HQ.cls" />
	<Setting  name="" Item="WSDC2" Target="Adapter" Setting="WebServiceURL" Value="http://wsdc2:${HTTPPORT}/csp/wsdc/WSDC.Service.HQ.cls" />
	<Setting  name="" Item="MAKER" Target="Adapter" Setting="WebServiceURL" Value="http://maker:${HTTPPORT}/csp/maker/MAKER.Service.HQ.cls" />
	</Production>
</Namespace>

</Manifest>
}

/// This is a method generator whose code is generated by XGL.
ClassMethod setupMethod(ByRef pVars, pLogLevel As %Integer = 3, pInstaller As %Installer.Installer, pLogger As %Installer.AbstractLogger) As %Status [ CodeMode = objectgenerator, Internal ]
{
    #; Let our XGL document generate code for this method. 
    Quit ##class(%Installer.Manifest).%Generate(%compiledclass, 
    %code, "setup")
}

ClassMethod setup(ByRef tVars) As %Status
{
  Set tSC='$$$OK
  Try {
		Set Namespace="wshq"

		If '$D(tVars("appuserpwd")) { Set tVars("appuserpwd")="sys" }
		If '$D(tVars("SRCDIR")) { Set tVars("SRCDIR")="/home/irisowner/src" }

  	  	Set tSC=..setupMethod(.tVars)

		Set oldns=$NAMESPACE
		New $NAMESPACE   ; just in case
		Set $NAMESPACE="%SYS"

		#; add an ECP Server definition
		Kill Properties
		Set ecpserverhost="wsdemo"
		Set Properties("Address")=ecpserverhost
		Set Properties("Port")=51773
		Set tSC=##Class(Config.ECPServers).Create(ecpserverhost,.Properties)

		#; add a Remote Database for Common.* tables
		Kill Properties
		#;Set Properties("Directory")="/usr/irissys/mgr/WSDEMO/"
		Set Properties("Directory")="/home/irisowner/database/WSDEMO/"
		Set Properties("Server")=ecpserverhost
		Set tSC=##Class(Config.Databases).Create("REM_WSDEMO",.Properties)

		#; Global Maping
 		Set Properties("Database")="REM_WSDEMO"
		Set Name="Common.*"
		Set tSC=##Class(Config.MapGlobals).Create(Namespace,Name,.Properties)

		#; Package mapping
		Set Name="Common"
		Set Status=##Class(Config.MapPackages).Create(Namespace,Name,.Properties) 

		Set tSC = ##Class(Security.Applications).Get("/csp/"_Namespace,.props)
		Set props("DeepSeeEnabled")=1
		Set props("MatchRoles")=":%All"
		Set tSC = ##Class(Security.Applications).Modify("/csp/"_Namespace,.props)

		Set $NAMESPACE=oldns

  } Catch(e) {
	  Set tSC=e.AsStatus()
  }
  Return tSC
}

}
